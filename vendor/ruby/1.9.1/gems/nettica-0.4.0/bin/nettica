#!/usr/bin/env ruby

require 'optparse'
require 'ostruct'

require 'rubygems'
require 'nettica/client'

options = OpenStruct.new
options.ttl = [0]
options.priority = [0]

opts = OptionParser.new do |opts|
  opts.banner = "Usage: nettica -u username -p password -c command [options]"
  opts.separator "Runs the given nettica service command, for example:"
  opts.separator ""
  opts.separator "  nettica -u my_user -p my_pass -c list_domain -d foo.com"
  opts.separator "  nettica -u my_user -p my_pass -c add_record -h bar -d foo.com -r A -t 300"
  opts.separator "          -a 192.168.1.1"
  opts.separator "  nettica -u my_user -p my_pass -c update_record -h bar -d foo.com"
  opts.separator "          -a 192.168.1.1,10.0.0.1"
  opts.separator "  nettica -u my_user -p my_pass -c update_record -h bar -d foo.com -a 10.0.0.1"
  opts.separator "          -t 60,300"
  opts.separator ""
  opts.separator "Options:"

  opts.on("-u", "--user USER", "Nettica username to use for authentication") do |val|
    options.username = val
  end
  opts.on("-p", "--password PASSWORD", "Nettica password to use for authentication") do |val|
    options.password = val
  end
  opts.on("-d", "--domain DOMAIN_NAME", Array, "Domain name to apply command to") do |val|
    options.domain = val
  end
  opts.on("-h", "--host HOST_NAME", Array, "Hostname to act upon") do |val|
    options.host = val
  end
  opts.on("-i", "--ip IP", "IP address") do |val|
    options.ip = val
  end
  opts.on("-r", "--recordtype RECORD_TYPE", Array, "Domain record type (A, CNAME, MX, F, TXT,", "SRV)") do |val|
    options.recordtype = val
  end
  opts.on("-t", "--ttl TIME_TO_LIVE", Array, "TTL for domain entries") do |val|
    options.ttl = val.collect {|each| each.to_i}
  end
  opts.on("-o", "--priority PRIORITY", Array, "Priority for MX/F records") do |val|
    options.priority = val.collect {|each| each.to_i}
  end
  opts.on("-g", "--group GROUP", "Domain group") do |val|
    options.group = val
  end
  opts.on("-m", "--master MASTER", "Master domain") do |val|
    options.master = val
  end
  opts.on("-a", "--data DATA", Array, "IP when creating/deleting records") do |val|
    options.data = val
  end

  opts.on("-c", "--command COMMAND",
           [:list_zones, :get_service_info, :update_record, :delete_record, :apply_template,
            :list_domain, :create_secondary_zone, :delete_zone, :create_zone, :add_record],
           "Command to execute against nettica service.",
           "One of list_zones, get_service_info,",
           "list_domain, update_record, delete_record,",
           "apply_template, create_secondary_zone,",
           "delete_zone, create_zone, add_record") do |val|
    options.command = val
  end

  opts.on_tail("--help", "Show this message") do
    puts opts
    exit
  end
end

begin
  args = opts.parse!(ARGV)
  raise "Missing required flag" if ! options.username || ! options.password || ! options.command
rescue Exception => e
  puts e, "", opts
  exit
end

result = nil
client = Nettica::Client.new(options.username, options.password)
case options.command
  when :list_zones
    result = client.list_zones()
  when :get_service_info
    result = client.get_service_info()
  when :list_domain
    result = client.list_domain(options.domain.first)
  when :update_record
    drold = client.create_domain_record(options.domain.first, options.host.first, options.recordtype.first,
                                     options.data.first, options.ttl.first, options.priority.first)
    drnew = client.create_domain_record(options.domain[1] || options.domain.first,
                                        options.host[1] || options.host.first,
                                        options.recordtype[1] || options.recordtype.first,
                                        options.data[1] || options.data.first,
                                        options.ttl[1] || options.ttl.first,
                                        options.priority[1] || options.priority.first)
    result = client.update_record(drold, drnew)
  when :delete_record
    dr = client.create_domain_record(options.domain.first, options.host.first, options.recordtype.first,
                                     options.data.first, options.ttl.first, options.priority.first)
    result = client.delete_record(dr)
  when :apply_template
    result = client.apply_template(options.domain.first, options.group)
  when :create_secondary_zone
    result = client.create_secondary_zone(options.domain.first, options.master, options.ip)
  when :delete_zone
    result = client.delete_zone(options.domain.first)
  when :create_zone
    result = client.create_zone(options.domain.first)
  when :add_record
    dr = client.create_domain_record(options.domain.first, options.host.first, options.recordtype.first,
                                     options.data.first, options.ttl.first, options.priority.first)
    result = client.add_record(dr)
end

puts result.inspect
